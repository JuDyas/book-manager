{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      file: null,\n      books: []\n    };\n  },\n  methods: {\n    ...mapActions(['importBooks']),\n    onFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    uploadBooks() {\n      if (this.file) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          const text = e.target.result;\n          this.parseBooks(text);\n        };\n        reader.readAsText(this.file);\n      } else {\n        alert('Пожалуйста, выберите файл');\n      }\n    },\n    parseBooks(text) {\n      const lines = text.split('\\n');\n      const books = lines.map(line => {\n        const parts = line.split(',');\n        if (parts.length === 3) {\n          const [title, author, year] = parts;\n          return {\n            title: title.trim(),\n            author: author.trim(),\n            year: parseInt(year.trim())\n          };\n        } else {\n          // Если формат строки некорректен, пропустим эту строку\n          console.error(`Некорректный формат строки: ${line}`);\n          return null;\n        }\n      }).filter(book => book !== null); // Удаляем некорректные строки из массива\n      this.importBooks(books);\n      alert('Книги успешно импортированы');\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["mapActions","data","file","books","methods","onFileChange","event","target","files","uploadBooks","reader","FileReader","onload","e","text","result","parseBooks","readAsText","alert","lines","split","map","line","parts","length","title","author","year","trim","parseInt","console","error","filter","book","importBooks","$router","push"],"sources":["C:\\Users\\JuDya\\Desktop\\book-manager\\src\\components\\UploadBooks.vue"],"sourcesContent":["<template>\r\n  <div class=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n    <div class=\"p-6 bg-white shadow-md rounded-lg w-full max-w-md\">\r\n      <h2 class=\"text-2xl font-bold mb-6 text-gray-800 text-center\">Импортировать данные о книгах</h2>\r\n      <input type=\"file\" @change=\"onFileChange\" class=\"mb-4 w-full\" />\r\n      <button @click=\"uploadBooks\" class=\"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600\">Импортировать книги</button>\r\n      <router-link to=\"/\" class=\"block mt-4\">\r\n        <button class=\"w-full bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600\">Вернуться на главную страницу</button>\r\n      </router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      file: null,\r\n      books: []\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions(['importBooks']),\r\n    onFileChange(event) {\r\n      this.file = event.target.files[0];\r\n    },\r\n    uploadBooks() {\r\n      if (this.file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const text = e.target.result;\r\n          this.parseBooks(text);\r\n        };\r\n        reader.readAsText(this.file);\r\n      } else {\r\n        alert('Пожалуйста, выберите файл');\r\n      }\r\n    },\r\n    parseBooks(text) {\r\n      const lines = text.split('\\n');\r\n      const books = lines.map(line => {\r\n        const parts = line.split(',');\r\n        if (parts.length === 3) {\r\n          const [title, author, year] = parts;\r\n          return {\r\n            title: title.trim(),\r\n            author: author.trim(),\r\n            year: parseInt(year.trim())\r\n          };\r\n        } else {\r\n          // Если формат строки некорректен, пропустим эту строку\r\n          console.error(`Некорректный формат строки: ${line}`);\r\n          return null;\r\n        }\r\n      }).filter(book => book !== null); // Удаляем некорректные строки из массива\r\n      this.importBooks(books);\r\n      alert('Книги успешно импортированы');\r\n      this.$router.push('/');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"mappings":";AAcA,SAASA,UAAS,QAAS,MAAM;AAEjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,GAAGJ,UAAU,CAAC,CAAC,aAAa,CAAC,CAAC;IAC9BK,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACJ,IAAG,GAAII,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACP,IAAI,EAAE;QACb,MAAMQ,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;UACrB,MAAMC,IAAG,GAAID,CAAC,CAACN,MAAM,CAACQ,MAAM;UAC5B,IAAI,CAACC,UAAU,CAACF,IAAI,CAAC;QACvB,CAAC;QACDJ,MAAM,CAACO,UAAU,CAAC,IAAI,CAACf,IAAI,CAAC;MAC9B,OAAO;QACLgB,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF,CAAC;IACDF,UAAUA,CAACF,IAAI,EAAE;MACf,MAAMK,KAAI,GAAIL,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC;MAC9B,MAAMjB,KAAI,GAAIgB,KAAK,CAACE,GAAG,CAACC,IAAG,IAAK;QAC9B,MAAMC,KAAI,GAAID,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;QAC7B,IAAIG,KAAK,CAACC,MAAK,KAAM,CAAC,EAAE;UACtB,MAAM,CAACC,KAAK,EAAEC,MAAM,EAAEC,IAAI,IAAIJ,KAAK;UACnC,OAAO;YACLE,KAAK,EAAEA,KAAK,CAACG,IAAI,CAAC,CAAC;YACnBF,MAAM,EAAEA,MAAM,CAACE,IAAI,CAAC,CAAC;YACrBD,IAAI,EAAEE,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC;UAC5B,CAAC;QACH,OAAO;UACL;UACAE,OAAO,CAACC,KAAK,CAAC,+BAA+BT,IAAI,EAAE,CAAC;UACpD,OAAO,IAAI;QACb;MACF,CAAC,CAAC,CAACU,MAAM,CAACC,IAAG,IAAKA,IAAG,KAAM,IAAI,CAAC,EAAE;MAClC,IAAI,CAACC,WAAW,CAAC/B,KAAK,CAAC;MACvBe,KAAK,CAAC,6BAA6B,CAAC;MACpC,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}